import{r as s,o as a,c as n,d as l,t as e,F as p,C as o,D as c,I as t,J as i,i as r,K as D,L as F,e as y,j as d,a as C}from"./app.aaf5bfda.js";const u=l("p",null,"Current component: A",-1),A={style:{"margin-right":"20px"}},b={name:"CompA",setup(o){let c=s(0);return(s,o)=>(a(),n(p,null,[u,l("span",A,"count: "+e(c.value),1),l("button",{onClick:o[0]||(o[0]=s=>c.value++)},"+")],64))}},g=l("p",null,"Current component: B",-1),v={style:{"margin-right":"20px"}},I={name:"CompB",setup(t){let i=s("");return(s,t)=>(a(),n(p,null,[g,l("span",v,"Message is: "+e(i.value),1),o(l("input",{"onUpdate:modelValue":t[0]||(t[0]=s=>i.value=s)},null,512),[[c,i.value]])],64))}},m={class:"demo"},X=y(" A"),B=y(" B"),G={name:"SwitchComponent",props:{useKeepAlive:Boolean},setup(s){let e=t(b);return(p,c)=>(a(),n("div",m,[l("label",null,[o(l("input",{type:"radio","onUpdate:modelValue":c[0]||(c[0]=s=>e.value=s),value:b},null,512),[[i,e.value]]),X]),l("label",null,[o(l("input",{type:"radio","onUpdate:modelValue":c[1]||(c[1]=s=>e.value=s),value:I},null,512),[[i,e.value]]),B]),s.useKeepAlive?(a(),r(F,{key:0},[(a(),r(D(e.value)))],1024)):(a(),r(D(e.value),{key:1}))]))}},h=C('<h1 id="keepalive" tabindex="-1">KeepAlive <a class="header-anchor" href="#keepalive" aria-hidden="true">#</a></h1><p><code>&lt;KeepAlive&gt;</code> 는 여러 컴포넌트 간에 동적으로 전환할 때 컴포넌트 인스턴스를 조건부로 캐시할 수 있는 내장 컴포넌트 입니다.</p><h2 id="basic-usage" tabindex="-1">기본 사용법 <a class="header-anchor" href="#basic-usage" aria-hidden="true">#</a></h2><p>컴포넌트 기본 장에서 <code>&lt;component&gt;</code> 특수 엘리먼트를 사용하여 <a>다이나믹 컴포넌트</a> 에 대한 구문을 소개했습니다.</p><div class="language-vue-html"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">activeComponent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span></code></pre></div><p>기본적으로 활성화 된 컴포넌트 인스턴스는 에서 이동될 때 해제됩니다. 이렇게 하면 가지고 있는 변경된 상태(changed state)가 사라집니다.</p><p>아래 예에는 두 가지 상태 저장 컴포넌트가 있습니다. A에는 카운터가 포함되고 B에는 <code>v-model</code> 을 통해 입력과 메시지가 동기화 되어 있습니다. 그 중 하나의 상태를 업데이트하고 다른 곳으로 이동한 다음 다시 돌아와 보세요.</p>',7),Z=C('<p>다시 돌아오면 이전에 변경된 상태가 초기화되었음을 알 수 있습니다.</p><p>이동하여 새 컴포넌트 인스턴스를 만드는 것은 일반적으로 유용한 동작이지만, 두 컴포넌트 인스턴스를 비활성 상태인 경우에도 유지 되기를 원하는 경우는 조금 다릅니다. 이 문제를 해결하기 위해 다이나믹 컴포넌트를 <code>&lt;KeepAlive&gt;</code> 내장 컴포넌트로 래핑할 수 있습니다.</p><div class="language-vue-html"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 비활성화 컴포넌트는 캐시 됩니다 --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">activeComponent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>이제 상태는 컴포넌트 이동 간에 유지됩니다.</p>',4),P=C('<div class="composition-api"><p><a href="https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHNoYWxsb3dSZWYgfSBmcm9tICd2dWUnXG5pbXBvcnQgQ29tcEEgZnJvbSAnLi9Db21wQS52dWUnXG5pbXBvcnQgQ29tcEIgZnJvbSAnLi9Db21wQi52dWUnXG5cbmNvbnN0IGN1cnJlbnQgPSBzaGFsbG93UmVmKENvbXBBKVxuPC9zY3JpcHQ+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImRlbW9cIj5cbiAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIHYtbW9kZWw9XCJjdXJyZW50XCIgOnZhbHVlPVwiQ29tcEFcIiAvPiBBPC9sYWJlbD5cbiAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIHYtbW9kZWw9XCJjdXJyZW50XCIgOnZhbHVlPVwiQ29tcEJcIiAvPiBCPC9sYWJlbD5cbiAgICA8S2VlcEFsaXZlPlxuICAgICAgPGNvbXBvbmVudCA6aXM9XCJjdXJyZW50XCI+PC9jb21wb25lbnQ+XG4gICAgPC9LZWVwQWxpdmU+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbiIsImltcG9ydC1tYXAuanNvbiI6IntcbiAgXCJpbXBvcnRzXCI6IHtcbiAgICBcInZ1ZVwiOiBcImh0dHBzOi8vc2ZjLnZ1ZWpzLm9yZy92dWUucnVudGltZS5lc20tYnJvd3Nlci5qc1wiXG4gIH1cbn0iLCJDb21wQS52dWUiOiI8c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmIH0gZnJvbSAndnVlJ1xuXG5jb25zdCBjb3VudCA9IHJlZigwKVxuPC9zY3JpcHQ+XG5cbjx0ZW1wbGF0ZT5cbiAgPHA+Q3VycmVudCBjb21wb25lbnQ6IEE8L3A+XG4gIDxzcGFuPmNvdW50OiB7eyBjb3VudCB9fTwvc3Bhbj5cbiAgPGJ1dHRvbiBAY2xpY2s9XCJjb3VudCsrXCI+KzwvYnV0dG9uPlxuPC90ZW1wbGF0ZT5cbiIsIkNvbXBCLnZ1ZSI6IjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYgfSBmcm9tICd2dWUnXG5jb25zdCBtc2cgPSByZWYoJycpXG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8cD5DdXJyZW50IGNvbXBvbmVudDogQjwvcD5cbiAgPHNwYW4+TWVzc2FnZSBpczoge3sgbXNnIH19PC9zcGFuPlxuICA8aW5wdXQgdi1tb2RlbD1cIm1zZ1wiPlxuPC90ZW1wbGF0ZT5cbiJ9" target="_blank" rel="noopener noreferrer">플레이그라운드에서 확인해보세요</a></p></div><div class="options-api"><p><a href="https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHNjcmlwdD5cbmltcG9ydCBDb21wQSBmcm9tICcuL0NvbXBBLnZ1ZSdcbmltcG9ydCBDb21wQiBmcm9tICcuL0NvbXBCLnZ1ZSdcbiAgXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHsgQ29tcEEsIENvbXBCIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnQ6ICdDb21wQSdcbiAgICB9XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJkZW1vXCI+XG4gICAgPGxhYmVsPjxpbnB1dCB0eXBlPVwicmFkaW9cIiB2LW1vZGVsPVwiY3VycmVudFwiIHZhbHVlPVwiQ29tcEFcIiAvPiBBPC9sYWJlbD5cbiAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIHYtbW9kZWw9XCJjdXJyZW50XCIgdmFsdWU9XCJDb21wQlwiIC8+IEI8L2xhYmVsPlxuICAgIDxLZWVwQWxpdmU+XG4gICAgICA8Y29tcG9uZW50IDppcz1cImN1cnJlbnRcIj48L2NvbXBvbmVudD5cbiAgICA8L0tlZXBBbGl2ZT5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuIiwiaW1wb3J0LW1hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge1xuICAgIFwidnVlXCI6IFwiaHR0cHM6Ly9zZmMudnVlanMub3JnL3Z1ZS5ydW50aW1lLmVzbS1icm93c2VyLmpzXCJcbiAgfVxufSIsIkNvbXBBLnZ1ZSI6IjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvdW50OiAwXG4gICAgfVxuICB9XG59XG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8cD5DdXJyZW50IGNvbXBvbmVudDogQTwvcD5cbiAgPHNwYW4+Y291bnQ6IHt7IGNvdW50IH19PC9zcGFuPlxuICA8YnV0dG9uIEBjbGljaz1cImNvdW50KytcIj4rPC9idXR0b24+XG48L3RlbXBsYXRlPlxuIiwiQ29tcEIudnVlIjoiPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbXNnOiAnJ1xuICAgIH1cbiAgfVxufVxuPC9zY3JpcHQ+XG5cblxuPHRlbXBsYXRlPlxuICA8cD5DdXJyZW50IGNvbXBvbmVudDogQjwvcD5cbiAgPHNwYW4+TWVzc2FnZSBpczoge3sgbXNnIH19PC9zcGFuPlxuICA8aW5wdXQgdi1tb2RlbD1cIm1zZ1wiPlxuPC90ZW1wbGF0ZT5cbiJ9" target="_blank" rel="noopener noreferrer">플레이그라운드에서 확인해보세요</a></p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="/guide/essentials/component-basics.html#dom-template-parsing-caveats">DOM 템플릿</a> 에서 사용하는 경우 <code>&lt;keep-alive&gt;</code> 로 참조해야 합니다.</p></div><h2 id="include-exclude" tabindex="-1">Include / Exclude <a class="header-anchor" href="#include-exclude" aria-hidden="true">#</a></h2><p>기본적으로 <code>&lt;KeepAlive&gt;</code> 는 내부의 컴포넌트 인스턴스를 캐시합니다. <code>include</code> 및 <code>exclude</code> props를 통해 이 동작을 사용자 정의할 수 있습니다. 두 props 모두 쉼표로 구분된 문자열, <code>RegExp</code> 또는 다음 타입 중 하나를 포함하는 배열이 될 수 있습니다.</p><div class="language-vue-html"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 쉼표로 구분된 문자열 --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a,b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- regex (use `v-bind`) --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;/</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">/&quot;</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- Array (use `v-bind`) --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>컴포넌트의 <a href="/api/options-misc.html#name"><code>name</code></a> 옵션에 대해 일치 여부를 확인하므로 <code>KeepAlive</code> 에서 조건부로 캐시해야 하는 컴포넌트는 <code>name</code> 옵션을 명시적으로 선언해야 합니다.</p><h2 id="max-cached-instances" tabindex="-1">최대 캐시 인스턴스 <a class="header-anchor" href="#max-cached-instances" aria-hidden="true">#</a></h2><p><code>max</code> prop을 통해 캐시할 수 있는 컴포넌트 인스턴스의 최대 수를 제한할 수 있습니다. <code>max</code> 가 지정되면 <code>&lt;KeepAlive&gt;</code> 는 <a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)" target="_blank" rel="noopener noreferrer">LRU 캐시</a> 처럼 동작합니다. 캐시된 인스턴스의 수가 지정된 최대 수를 초과하려고 하면 가장 최근에 접근한 캐시된 인스턴스가 파괴되어 새 인스턴스를 위한 공간이 생깁니다.</p><div class="language-vue-html"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">max</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">activeComponent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><h2 id="lifecycle-of-cached-instance" tabindex="-1">캐시된 인스턴스의 라이프사이클 <a class="header-anchor" href="#lifecycle-of-cached-instance" aria-hidden="true">#</a></h2><p>컴포넌트 인스턴스가 DOM에서 제거되었지만 <code>&lt;KeepAlive&gt;</code> 에 의해 캐시된 컴포넌트 트리의 일부인 경우 해제되는 대신 <strong>비활성화된</strong> 상태가 됩니다. 컴포넌트 인스턴스가 캐시된 트리의 일부로 DOM에 추가되면 <strong>활성화됩니다</strong> .</p><div class="composition-api"><p>kept-alive 컴포넌트는 <a href="/api/composition-api-lifecycle.html#onactivated"><code>onActivated()</code></a> 및 <a href="/api/composition-api-lifecycle.html#ondeactivated"><code>onDeactivated()</code></a> 를 사용하여 이 두 가지 상태에 대한 라이프사이클 훅을 등록할 수 있습니다.</p><div class="language-vue"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onActivated</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onDeactivated</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">onActivated</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 초기 mount 시 호출</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 그리고 매번 캐시에 다시 저장</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">onDeactivated</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// DOM에서 캐시가 제거된 경우 호출</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 그리고 unmounted 경우</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div></div><div class="options-api"><p>kept-alive 컴포넌트는 <a href="/api/options-lifecycle.html#activated"><code>activated</code></a> 훅과 <a href="/api/options-lifecycle.html#deactivated"><code>deactivated</code></a> 훅를 사용하여 다음 두 가지 상태에 대한 라이프사이클 훅을 등록할 수 있습니다.</p><div class="language-js"><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">activated</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 초기 mount시 호출</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 그리고 매번 캐시에 다시 저장</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">deactivated</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// DOM에서 캐시가 제거된 경우 호출</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 그리고 unmounted 경우</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></div><p>참고:</p><ul><li><p><span class="composition-api"><code>onActivated</code></span> <span class="options-api"><code>activated</code></span> 는 마운트 시에도 호출되고 <span class="composition-api"><code>onDeactivated</code></span> 는 마운트 해제 시 <span class="options-api"><code>deactivated</code></span> 됩니다.</p></li><li><p>두 훅 모두 <code>&lt;KeepAlive&gt;</code> 에 의해 캐시된 루트 컴포넌트뿐만 아니라 캐시된 트리의 하위 컴포넌트에서도 작동합니다.</p></li></ul><hr><p><strong>관련</strong></p><ul><li><a href="/api/built-in-components.html#keepalive"><code>&lt;KeepAlive&gt;</code> API reference</a></li></ul>',19),V='{"title":"KeepAlive","description":"","frontmatter":{},"headers":[{"level":2,"title":"기본 사용법","slug":"basic-usage"},{"level":2,"title":"Include / Exclude","slug":"include-exclude"},{"level":2,"title":"최대 캐시 인스턴스","slug":"max-cached-instances"},{"level":2,"title":"캐시된 인스턴스의 라이프사이클","slug":"lifecycle-of-cached-instance"}],"relativePath":"guide/built-ins/keep-alive.md"}',x=Object.assign({},{name:"keep-alive",setup:s=>(s,l)=>(a(),n("div",null,[h,d(G),Z,d(G,{"use-KeepAlive":""}),P]))});export{V as __pageData,x as default};
