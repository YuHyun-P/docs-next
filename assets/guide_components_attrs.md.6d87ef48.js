import{_ as s,c as e,o as t,a}from"./app.81d9e70c.js";const o='{"title":"Fallthrough Attributes","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"Attribute Inheritance","slug":"attribute-inheritance"},{"level":2,"title":"속성 상속","slug":"속성-상속"},{"level":3,"title":"class and style Merging","slug":"class-and-style-merging"},{"level":3,"title":"class, style 병합","slug":"class-style-병합"},{"level":3,"title":"v-on Listener Inheritance","slug":"v-on-listener-inheritance"},{"level":3,"title":"v-on 리스너 상속","slug":"v-on-리스너-상속"},{"level":3,"title":"Nested Component Inheritance","slug":"nested-component-inheritance"},{"level":3,"title":"중첩된 컴포넌트 상속","slug":"중첩된-컴포넌트-상속"},{"level":2,"title":"Disabling Attribute Inheritance","slug":"disabling-attribute-inheritance"},{"level":2,"title":"속성 상속 비활성화 하기","slug":"속성-상속-비활성화-하기"},{"level":2,"title":"Attribute Inheritance on Multiple Root Nodes","slug":"attribute-inheritance-on-multiple-root-nodes"},{"level":2,"title":"다중 루트 노드에서 속성 상속","slug":"다중-루트-노드에서-속성-상속"},{"level":2,"title":"Accessing Fallthrough Attributes in JavaScript","slug":"accessing-fallthrough-attributes-in-javascript"},{"level":2,"title":"자바스크립트에서 대체  속성에 접근하기","slug":"자바스크립트에서-대체-속성에-접근하기"}],"relativePath":"guide/components/attrs.md"}',n={},l=[a('<div class="warning custom-block"><p class="custom-block-title">현재 이 문서는 번역 작업이 진행중입니다</p></div><h1 id="fallthrough-attributes" tabindex="-1">Fallthrough Attributes <a class="header-anchor" href="#fallthrough-attributes" aria-hidden="true">#</a></h1><h1 id="대체-fallthrough-속성" tabindex="-1">대체(Fallthrough) 속성 <a class="header-anchor" href="#대체-fallthrough-속성" aria-hidden="true">#</a></h1><blockquote><p>This page assumes you&#39;ve already read the <a href="/guide/essentials/component-basics.html">Components Basics</a>. Read that first if you are new to components.</p></blockquote><h2 id="attribute-inheritance" tabindex="-1">Attribute Inheritance <a class="header-anchor" href="#attribute-inheritance" aria-hidden="true">#</a></h2><h2 id="속성-상속" tabindex="-1">속성 상속 <a class="header-anchor" href="#속성-상속" aria-hidden="true">#</a></h2><p>A &quot;fallthrough attribute&quot; is an attribute or <code>v-on</code> event listener that is passed to a component, but is not explicitly declared in the receiving component&#39;s <a href="./props.html">props</a> or <a href="./events.html#declaring-emitted-events">emits</a>. Common examples of this include <code>class</code>, <code>style</code>, and <code>id</code> attributes.</p><p>&quot;대체(fallthrough) 속성&quot;은 컴포넌트에 전달되지만 수신 컴포넌트의 <a href="./props.html">props</a> 또는 <a href="./events.html#declaring-emitted-events">emit</a>에 명시적으로 선언되지 않은 속성 또는 <code>v-on</code> 이벤트 리스너입니다. 일반적인 예로는 <code>class</code>, <code>style</code>, <code>id</code> 속성이 있습니다.</p><p>When a component renders a single root element, fallthrough attributes will be automatically added to the root element&#39;s attributes. For example, given a <code>&lt;MyButton&gt;</code> component with the following template:</p><p>컴포넌트가 단일 루트 앨리먼트를 렌더링하면 대체 속성이 루트 앨리먼트의 속성에 자동으로 추가됩니다. 예를 들어 다음 템플릿이 있는 <code>&lt;MyButton&gt;</code> 컴포넌트가 있다고 가정합니다.</p><div class="language-vue-html"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- template of &lt;MyButton&gt; --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">click me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>And a parent using this component with:</p><p>부모 컴포넌트에서 다음처럼 사용하면:</p><div class="language-vue-html"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyButton</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">large</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span></code></pre></div><p>The final rendered DOM would be:</p><p>최종 DOM은 이렇게 렌더링 됩니다:</p><div class="language-html"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">large</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">click me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><h3 id="class-and-style-merging" tabindex="-1"><code>class</code> and <code>style</code> Merging <a class="header-anchor" href="#class-and-style-merging" aria-hidden="true">#</a></h3><h3 id="class-style-병합" tabindex="-1"><code>class</code>, <code>style</code> 병합 <a class="header-anchor" href="#class-style-병합" aria-hidden="true">#</a></h3><p>If the child component&#39;s root element already has existing <code>class</code> or <code>style</code> attributes, it will be merged with the <code>class</code> and <code>style</code> values that are inherited from the parent. Suppose we change the template of <code>&lt;MyButton&gt;</code> in the previous example to:</p><p>하위 컴포넌트의 루트 앨리먼트에 이미 기존 <code>class</code> 또는 <code>style</code> 속성이 있는 경우 상위 앨리먼트에서 상속된 <code>class</code> 및 <code>style</code> 값과 병합됩니다. 이전 예에서 <code>&lt;MyButton&gt;</code>의 템플릿을 다음과 같이 변경한다면:</p><div class="language-vue-html"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- template of &lt;MyButton&gt; --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">btn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">click me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>Then the final rendered DOM would now become:</p><p>최종 렌더링된 DOM이 다음 처럼 바뀝니다:</p><div class="language-html"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">btn large</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">click me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><h3 id="v-on-listener-inheritance" tabindex="-1"><code>v-on</code> Listener Inheritance <a class="header-anchor" href="#v-on-listener-inheritance" aria-hidden="true">#</a></h3><h3 id="v-on-리스너-상속" tabindex="-1"><code>v-on</code> 리스너 상속 <a class="header-anchor" href="#v-on-리스너-상속" aria-hidden="true">#</a></h3><p>The same rule applies to <code>v-on</code> event listeners:</p><p>동일한 규칙이 <code>v-on</code> 이벤트 리스너에도 적용됩니다:</p><div class="language-vue-html"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyButton</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">onClick</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span></code></pre></div><p>The <code>click</code> listener will be added to the root element of <code>&lt;MyButton&gt;</code>, i.e. the native <code>&lt;button&gt;</code> element. When the native <code>&lt;button&gt;</code> is clicked, it will trigger the <code>onClick</code> method of the parent component. If the native <code>&lt;button&gt;</code> already has a <code>click</code> listener bound with <code>v-on</code>, then both listeners will trigger.</p><p><code>click</code> 리스너는 <code>&lt;MyButton&gt;</code>의 루트 앨리먼트, 즉 기본 <code>&lt;button&gt;</code> 앨리먼트에 추가됩니다. 기본 <code>&lt;button&gt;</code>을 클릭하면 상위 컴포넌트의 <code>onClick</code> 메소드가 트리거됩니다. 기본 <code>&lt;button&gt;</code>에 이미 <code>v-on</code>으로 바인딩된 <code>click</code> 리스너가 있는 경우 두 리스너가 모두 트리거됩니다.</p><h3 id="nested-component-inheritance" tabindex="-1">Nested Component Inheritance <a class="header-anchor" href="#nested-component-inheritance" aria-hidden="true">#</a></h3><h3 id="중첩된-컴포넌트-상속" tabindex="-1">중첩된 컴포넌트 상속 <a class="header-anchor" href="#중첩된-컴포넌트-상속" aria-hidden="true">#</a></h3><p>If a component renders another component as its root node, for example, we refactored <code>&lt;MyButton&gt;</code> to render a <code>&lt;BaseButton&gt;</code> as its root:</p><p>예를 들어 컴포넌트가 다른 컴포넌트를 루트 노드로 렌더링하는 경우 <code>&lt;MyButton&gt;</code>을 리팩터링하여 <code>&lt;BaseButton&gt;</code>을 루트로 렌더링합니다.</p><div class="language-vue-html"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- template of &lt;MyButton/&gt; that simply renders another component --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">BaseButton</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span></code></pre></div><p>Then the fallthrough attributes received by <code>&lt;MyButton&gt;</code> will be automatically forwarded to <code>&lt;BaseButton&gt;</code>.</p><p>그러면 <code>&lt;MyButton&gt;</code>이 수신한 대체 속성이 자동으로 <code>&lt;BaseButton&gt;</code>으로 전달됩니다.</p><p>Note that:</p><p>참조:</p><ol><li><p>Forwarded attributes do not include any attributes that are declared as props, or <code>v-on</code> listeners of declared events by <code>&lt;MyButton&gt;</code> - in other words, the declared props and listeners have been &quot;consumed&quot; by <code>&lt;MyButton&gt;</code>.</p></li><li><p>전달된 속성에는 props로 선언된 속성이나 <code>&lt;MyButton&gt;</code>에 의해 선언된 이벤트의 <code>v-on</code> 리스너가 포함되지 않습니다. 즉, 선언된 props와 리스너는 <code>&lt;MyButton&gt;</code>에 의해 &quot;소비&quot;되었습니다. .</p></li><li><p>Forwarded attributes may be accepted as props by <code>&lt;BaseButton&gt;</code>, if declared by it.</p></li><li><p>전달된 속성은 <code>&lt;BaseButton&gt;</code>에 의해 선언된 경우 props 로 허용될 수 있습니다.</p></li></ol><h2 id="disabling-attribute-inheritance" tabindex="-1">Disabling Attribute Inheritance <a class="header-anchor" href="#disabling-attribute-inheritance" aria-hidden="true">#</a></h2><h2 id="속성-상속-비활성화-하기" tabindex="-1">속성 상속 비활성화 하기 <a class="header-anchor" href="#속성-상속-비활성화-하기" aria-hidden="true">#</a></h2><p>If you do <strong>not</strong> want a component to automatically inherit attributes, you can set <code>inheritAttrs: false</code> in the component&#39;s options.</p><p>컴포넌트가 속성을 자동으로 상속하지 <strong>않도록</strong> 하려면 컴포넌트 옵션에서 <code>inheritAttrs: false</code>를 설정하면 됩니다.</p><div class="composition-api"><p>If using <code>&lt;script setup&gt;</code>, you will need to declare this option using a separate, normal <code>&lt;script&gt;</code> block:</p><p><code>&lt;script setup&gt;</code>를 사용중이라면, 별로도 분리된 , <code>&lt;script&gt;</code> 블럭에서 이 옵션을 선언해야 합니다 :</p><div class="language-vue"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 일반  &lt;script&gt;  블럭을 이용하여 옵션 선언 </span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">inheritAttrs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// ...setup logic</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div></div><p>The common scenario for disabling attribute inheritance is when attributes need to be applied to other elements besides the root node. By setting the <code>inheritAttrs</code> option to <code>false</code>, you can take full control over where the fallthrough attributes should be applied.</p><p>속성 상속을 비활성화하는 일반적인 시나리오는 루트 노드 이외의 다른 앨리먼트에 속성을 적용해야 하는 경우입니다. <code>inheritAttrs</code> 옵션을 <code>false</code>로 설정하면 대체 속성을 적용해야 하는 위치를 완전히 제어할 수 있습니다.</p><p>These fallthrough attributes can be accessed directly in template expressions as <code>$attrs</code>:</p><p>이러한 대체 속성은 템플릿 표현식에서 <code>$attrs</code>로 직접 액세스할 수 있습니다:</p><div class="language-vue-html"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Fallthrough attributes: </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> $attrs </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>The <code>$attrs</code> object includes all attributes that are not declared by the component&#39;s <code>props</code> or <code>emits</code> options (e.g., <code>class</code>, <code>style</code>, <code>v-on</code> listeners, etc.).</p><p><code>$attrs</code> 객체에는 컴포넌트의 <code>props</code> 또는 <code>emits</code> 옵션(예: <code>class</code>, <code>style</code>, <code>v-on</code> 리스너 등)으로 선언되지 않은 모든 속성이 포함됩니다.</p><p>Some notes:</p><p>참고:</p><ul><li><p>Unlike props, fallthrough attributes preserve their original casing in JavaScript, so an attribute like <code>foo-bar</code> needs to be accessed as <code>$attrs[&#39;foo-bar&#39;]</code>.</p></li><li><p>props와 달리 대체 속성은 JavaScript에서 원래 대소문자를 유지하므로 <code>foo-bar</code>와 같은 속성은 <code>$attrs[&#39;foo-bar&#39;]</code>로 액세스해야 합니다.</p></li><li><p>A <code>v-on</code> event listener like <code>@click</code> will be exposed on the object as a function under <code>$attrs.onClick</code>.</p></li><li><p><code>@click</code>과 같은 <code>v-on</code> 이벤트 리스너는 <code>$attrs.onClick</code> 라는 이름의 함수로 객체에 노출됩니다.</p></li></ul><p>Using our <code>&lt;MyButton&gt;</code> component example from the <a href="#attribute-inheritance">previous section</a> - sometimes we may need to wrap the actual <code>&lt;button&gt;</code> element with an extra <code>&lt;div&gt;</code> for styling purposes:</p><p><a href="#attribute-inheritance">이전 섹션</a>의 <code>&lt;MyButton&gt;</code> 컴포넌트 예제에서 처럼 - 때로는 실제 <code>&lt;button&gt;</code> 앨리먼트를 스타일 지정을 위해 추가 <code>&lt;div&gt;</code>로 래핑해야 할 수도 있습니다.</p><div class="language-vue-html"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">btn-wrapper</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">btn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">click me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>We want all fallthrough attributes like <code>class</code> and <code>v-on</code> listeners to be applied to the inner <code>&lt;button&gt;</code>, not the outer <code>&lt;div&gt;</code>. We can achieve this with <code>inheritAttrs: false</code> and <code>v-bind=&quot;$attrs&quot;</code>:</p><p>여기에서 <code>class</code> 및 <code>v-on</code> 리스너와 같은 모든 대체 속성이 외부 <code>&lt;div&gt;</code>가 아닌 내부 <code>&lt;button&gt;</code>에 적용되기를 원합니다. <code>inheritAttrs: false</code> 로 설정하고 <code>v-bind=&quot;$attrs&quot;</code>로 건내 주어 달성할 수 있습니다.</p><div class="language-vue-html"><div class="highlight-lines"><br><div class="highlighted"> </div><br><br></div><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">btn-wrapper</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">btn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$attrs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">click me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>Remember that <a href="/guide/essentials/template-syntax.html#dynamically-binding-multiple-attributes"><code>v-bind</code> without an argument</a> binds all the properties of an object as attributes of the target element.</p><p><a href="/guide/essentials/template-syntax.html#dynamically-binding-multiple-attributes">인자없는 <code>v-bind</code></a>는 객체의 모든 속성을 대상 앨리먼트의 속성으로 바인딩합니다.</p><h2 id="attribute-inheritance-on-multiple-root-nodes" tabindex="-1">Attribute Inheritance on Multiple Root Nodes <a class="header-anchor" href="#attribute-inheritance-on-multiple-root-nodes" aria-hidden="true">#</a></h2><h2 id="다중-루트-노드에서-속성-상속" tabindex="-1">다중 루트 노드에서 속성 상속 <a class="header-anchor" href="#다중-루트-노드에서-속성-상속" aria-hidden="true">#</a></h2><p>Unlike components with a single root node, components with multiple root nodes do not have an automatic attribute fallthrough behavior. If <code>$attrs</code> are not bound explicitly, a runtime warning will be issued.</p><p>단일 루트 노드가 있는 컴포넌트와 달리 여러 루트 노드가 있는 컴포넌트에는 자동 속성 폴스루 동작이 없습니다. <code>$attrs</code>가 명시적으로 바인딩되지 않은 경우 런타임 경고가 발행됩니다.</p><div class="language-vue-html"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">CustomLayout</span><span style="color:#89DDFF;"> </span><span style="color:#F78C6C;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">custom-layout</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">changeValue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span></code></pre></div><p>If <code>&lt;CustomLayout&gt;</code> has the following multi-root template, there will be a warning because Vue cannot be sure where to apply the fallthrough attributes:</p><p><code>&lt;CustomLayout&gt;</code>에 다음과 같은 다중 루트 템플릿이 있는 경우 Vue가 대체 속성을 적용할 위치를 확신할 수 없기 때문에 경고가 표시됩니다:</p><div class="language-vue-html"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">header</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">header</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">main</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">main</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">footer</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">footer</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>The warning will be suppressed if <code>$attrs</code> is explicitly bound:</p><p><code>$attrs</code>가 명시적으로 바인딩된 경우 경고가 표시되지 않습니다:</p><div class="language-vue-html"><div class="highlight-lines"><br><div class="highlighted"> </div><br><br></div><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">header</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">header</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">main</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$attrs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">main</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">footer</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">footer</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><h2 id="accessing-fallthrough-attributes-in-javascript" tabindex="-1">Accessing Fallthrough Attributes in JavaScript <a class="header-anchor" href="#accessing-fallthrough-attributes-in-javascript" aria-hidden="true">#</a></h2><h2 id="자바스크립트에서-대체-속성에-접근하기" tabindex="-1">자바스크립트에서 대체 속성에 접근하기 <a class="header-anchor" href="#자바스크립트에서-대체-속성에-접근하기" aria-hidden="true">#</a></h2><div class="composition-api"><p>If needed, you can access a component&#39;s fallthrough attributes in <code>&lt;script setup&gt;</code> using the <code>useAttrs()</code> API:</p><p>필요한 경우 <code>useAttrs()</code> API를 사용하여 <code>&lt;script setup&gt;</code>에서 컴포넌트의 대체 속성에 액세스할 수 있습니다.</p><div class="language-vue"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useAttrs</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> attrs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useAttrs</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>If not using <code>&lt;script setup&gt;</code>, <code>attrs</code> will be exposed as a property of the <code>setup()</code> context:</p><p><code>&lt;script setup&gt;</code>을 사용하지 않으면 <code>attrs</code>가 <code>setup()</code> 컨텍스트의 속성으로 노출됩니다.</p><div class="language-js"><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">setup</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// fallthrough attributes are exposed as ctx.attrs</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 대체속성은 ctx.attrs 으로 노출됩니다</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">attrs</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>Note that although the <code>attrs</code> object here always reflect the latest fallthrough attributes, it isn&#39;t reactive (for performance reasons). You cannot use watchers to observe its changes. If you need reactivity, use a prop. Alternatively, you can use <code>onUpdated()</code> to perform side effects with latest <code>attrs</code> on each update.</p><p>알아두어야 할것은, <code>attrs</code> 객체는 항상 최신 대체 속성을 반영하지만 반응하지 않습니다(성능상의 이유로). 감시자를 사용하여 변경 사항을 관찰할 수 없습니다. 반응성이 필요하면 prop을 사용하세요. 또는 <code>onUpdated()</code>를 사용하여 각 업데이트에서 최신 <code>attrs</code>로 부작용(side-effect)을 수행할 수 있습니다.</p></div><div class="options-api"><p>If needed, you can access a component&#39;s fallthrough attributes via the <code>$attrs</code> instance property:</p><p>필요한 경우 <code>$attrs</code> 인스턴스 속성을 통해 컴포넌트의 대체 속성에 액세스할 수 있습니다.</p><div class="language-js"><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$attrs</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></div>',80)];var p=s(n,[["render",function(s,a,o,n,p,c){return t(),e("div",null,l)}]]);export{o as __pageData,p as default};
