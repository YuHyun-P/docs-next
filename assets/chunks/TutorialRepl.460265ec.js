import{R as s,o as n,a,r as o,b as e}from"./utils.8714fd3a.js";import{_ as l,g as p,a4 as t,r as c,a5 as r,h as i,X as d,c as D,d as F,j as y,ac as C,w as h,u,ad as A,t as m,l as v,$ as f,ae as g,e as b,af as x,o as w,F as j,n as E,i as T,W as k,k as q}from"../app.0932d007.js";const I=JSON.parse('{"step-1":{"App":{"template.html":"<h1>안녕 Vue!</h1>\\n"},"description.md":"<h1 id=\\"시작하기\\" tabindex=\\"-1\\">시작하기 <a class=\\"header-anchor\\" href=\\"#시작하기\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>Vue 튜토리얼에 온 것을 환영합니다.</p>\\n<p>이 튜토리얼의 목표는 브라우저에서 빠르고 쉽게 Vue 사용 경험을 제공하는 것입니다.\\n포괄적인 것을 목표로 하지 않으므로 계속 진행하기 전에 모든 것을 이해할 필요가 없습니다.\\n그러나 완료한 후에는 각 주제에 대해 자세히 설명하는 <a target=\\"_blank\\" href=\\"/guide/introduction.html\\">가이드</a>를 읽어봅시다.</p>\\n<h2 id=\\"전제-조건\\" tabindex=\\"-1\\">전제 조건 <a class=\\"header-anchor\\" href=\\"#전제-조건\\" aria-hidden=\\"true\\">#</a></h2>\\n<p>이 튜토리얼에서는 HTML, CSS 및 JavaScript에 대한 기본적인 지식이 있다고 가정합니다.\\n프론트엔드 개발을 처음하는 경우, 첫 번째 단계로 프레임워크로 바로 뛰어드는 것이 좋은 생각이 아닐 수 있습니다.\\n기초를 갖춘 다음 다시 돌아오세요!\\n다른 프레임워크를 사용해본 경험이 도움이 될 수 있지만 필수는 아닙니다.</p>\\n<h2 id=\\"이-튜토리얼을-사용하는-방법\\" tabindex=\\"-1\\">이 튜토리얼을 사용하는 방법 <a class=\\"header-anchor\\" href=\\"#이-튜토리얼을-사용하는-방법\\" aria-hidden=\\"true\\">#</a></h2>\\n<p>오른쪽에서 코드를 편집하고 즉시 업데이트된 결과물을 볼 수 있습니다.\\n각 단계는 Vue의 핵심 기능을 소개하며, 데모가 작동하도록 코드를 완성해야 합니다.\\n막히면 작동하는 코드를 보여주는 &quot;보여줘!&quot; 버튼이 표시됩니다.\\n하지만 그것에 너무 의존하지 맙시다.\\n스스로 알아내면 더 빨리 배울 수 있습니다.</p>\\n<p>Vue 2 또는 다른 프레임워크에서 온 숙련된 개발자라면 이 튜토리얼을 최대한 활용하기 위해 조정할 수 있는 몇 가지 설정이 있습니다.\\n초보자라면 기본값을 사용하는 것이 좋습니다.</p>\\n<details>\\n<summary>튜토리얼 설정 세부 사항</summary>\\n<ul>\\n<li>\\n<p>Vue는 옵션 API와 컴포지션 API의 두 가지 API 스타일을 제공합니다.\\n이 튜토리얼은 두 스타일 모두에서 작동하도록 설계되었습니다.\\n상단의 API 스타일 설정 스위치를 사용하여 원하는 스타일을 선택할 수 있습니다.\\n<a target=\\"_blank\\" href=\\"/guide/introduction.html#api-styles\\">API 스타일에 대해 자세히 알아보기</a></p>\\n</li>\\n<li>\\n<p>SFC 또는 HTML 모드로 전환할 수도 있습니다.\\n전자는 대부분의 개발자가 빌드 단계에서 Vue를 사용할 때 사용하는 <a target=\\"_blank\\" href=\\"/guide/introduction.html#single-file-components\\">싱글 파일 컴포넌트</a>(SFC) 형식의 코드 예제를 보여줍니다.\\nHTML 모드는 빌드 단계 없이 사용법을 보여줍니다.</p>\\n</li>\\n</ul>\\n</details>\\n<p>준비 됬나요?\\n&quot;다음&quot;을 클릭하여 시작합시다.</p>\\n"},"step-10":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const todoId = ref(1)\\n    const todoData = ref(null)\\n\\n    async function fetchData() {\\n      todoData.value = null\\n      const res = await fetch(\\n        `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\\n      )\\n      todoData.value = await res.json()\\n    }\\n\\n    fetchData()\\n\\n    return {\\n      todoId,\\n      todoData\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      todoId: 1,\\n      todoData: null\\n    }\\n  },\\n  methods: {\\n    async fetchData() {\\n      this.todoData = null\\n      const res = await fetch(\\n        `https://jsonplaceholder.typicode.com/todos/${this.todoId}`\\n      )\\n      this.todoData = await res.json()\\n    }\\n  },\\n  mounted() {\\n    this.fetchData()\\n  }\\n}\\n","template.html":"<p>Todo id: {{ todoId }}</p>\\n<button @click=\\"todoId++\\">Fetch next todo</button>\\n<p v-if=\\"!todoData\\">Loading...</p>\\n<pre v-else>{{ todoData }}</pre>\\n"},"_hint":{"App":{"composition.js":"import { ref, watch } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const todoId = ref(1)\\n    const todoData = ref(null)\\n\\n    async function fetchData() {\\n      todoData.value = null\\n      const res = await fetch(\\n        `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\\n      )\\n      todoData.value = await res.json()\\n    }\\n\\n    fetchData()\\n\\n    watch(todoId, fetchData)\\n\\n    return {\\n      todoId,\\n      todoData\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      todoId: 1,\\n      todoData: null\\n    }\\n  },\\n  methods: {\\n    async fetchData() {\\n      this.todoData = null\\n      const res = await fetch(\\n        `https://jsonplaceholder.typicode.com/todos/${this.todoId}`\\n      )\\n      this.todoData = await res.json()\\n    }\\n  },\\n  mounted() {\\n    this.fetchData()\\n  },\\n  watch: {\\n    todoId() {\\n      this.fetchData()\\n    }\\n  }\\n}\\n","template.html":"<p>Todo id: {{ todoId }}</p>\\n<button @click=\\"todoId++\\">Fetch next todo</button>\\n<p v-if=\\"!todoData\\">Loading...</p>\\n<pre v-else>{{ todoData }}</pre>\\n"},"description.md":{}},"description.md":"<h1 id=\\"watchers\\" tabindex=\\"-1\\">Watchers <a class=\\"header-anchor\\" href=\\"#watchers\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>Sometimes we may need to perform &quot;side effects&quot; reactively - for example, logging a number to the console when it changes. We can achieve this with watchers:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">ref</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">watch</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> count </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">watch</span><span style=\\"color: #A6ACCD\\">(count</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">newCount</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// yes, console.log() is a side effect</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #A6ACCD\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">`</span><span style=\\"color: #C3E88D\\">new count is: </span><span style=\\"color: #89DDFF\\">${</span><span style=\\"color: #A6ACCD\\">newCount</span><span style=\\"color: #89DDFF\\">}`</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p><code>watch()</code> can directly watch a ref, and the callback gets fired whenever <code>count</code>\'s value changes. <code>watch()</code> can also watch other types of data sources - more details are covered in <a target=\\"_blank\\" href=\\"/guide/essentials/watchers.html\\">Guide - Watchers</a>.</p>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">data</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      count</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">watch</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">count</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">newCount</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// yes, console.log() is a side effect</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #A6ACCD\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">`</span><span style=\\"color: #C3E88D\\">new count is: </span><span style=\\"color: #89DDFF\\">${</span><span style=\\"color: #A6ACCD\\">newCount</span><span style=\\"color: #89DDFF\\">}`</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>Here, we are using the <code>watch</code> option to watch changes to the <code>count</code> property. The watch callback is called when <code>count</code> changes, and receives the new value as the argument. More details are covered in <a target=\\"_blank\\" href=\\"/guide/essentials/watchers.html\\">Guide - Watchers</a>.</p>\\n</div>\\n<p>A more practical example than logging to the console would be fetching new data when an ID changes. The code we have is fetching todos data from a mock API on component mount. There is also a button that increments the todo ID that should be fetched. Try to implement a watcher that fetches a new todo when the button is clicked.</p>\\n"},"step-11":{"App":{"composition.js":"export default {\\n  // register component\\n}\\n","options.js":"export default {\\n  // register child component\\n}\\n","template.html":"\x3c!-- render child component --\x3e\\n"},"ChildComp":{"template.html":"<h2>A Child Component!</h2>\\n"},"_hint":{"App":{"composition.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  }\\n}\\n","template.html":"<ChildComp />\\n"},"ChildComp":{"template.html":"<h2>A Child Component!</h2>\\n"},"description.md":{}},"description.md":"<h1 id=\\"components\\" tabindex=\\"-1\\">Components <a class=\\"header-anchor\\" href=\\"#components\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>So far, we\'ve only been working with a single component. Real Vue applications are typically created with nested components.</p>\\n<p>A parent component can render another component in its template as a child component. To use a child component, we need to first import it:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> ChildComp </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">./ChildComp.vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> ChildComp </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">./ChildComp.vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">components</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    ChildComp</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>We also need to register the component using the <code>components</code> option. Here we are using the object property shorthand to register the <code>ChildComp</code> component under the <code>ChildComp</code> key.</p>\\n</div>\\n</div>\\n<div class=\\"sfc\\">\\n<p>Then, we can use the component in the template as:</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #FFCB6B\\">ChildComp</span><span style=\\"color: #89DDFF\\"> /&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> ChildComp </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">./ChildComp.js</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">components</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    ChildComp</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>We also need to register the component using the <code>components</code> option. Here we are using the object property shorthand to register the <code>ChildComp</code> component under the <code>ChildComp</code> key.</p>\\n<p>Because we are writing the template in the DOM, it will be subject to browser\'s parsing rules, which is case-insensitive for tag names. Therefore, we need to use the kebab-cased name to reference the child component:</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>Now try it yourself - import the child component and render it in the template.</p>\\n"},"step-12":{"App":{"composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const greeting = ref(\'Hello from parent\')\\n\\n    return {\\n      greeting\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      greeting: \'Hello from parent\'\\n    }\\n  }\\n}\\n","template.html":"<ChildComp />\\n"},"ChildComp":{"composition.js":"export default {\\n  props: {\\n    msg: String\\n  }\\n}\\n","options.js":"export default {\\n  props: {\\n    msg: String\\n  }\\n}\\n","template.html":"<h2>{{ msg || \'No props passed yet\' }}</h2>\\n"},"_hint":{"App":{"template.html":"<ChildComp :msg=\\"greeting\\" />\\n","composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const greeting = ref(\'Hello from parent\')\\n\\n    return {\\n      greeting\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      greeting: \'Hello from parent\'\\n    }\\n  }\\n}\\n"},"ChildComp":{"composition.js":"export default {\\n  props: {\\n    msg: String\\n  }\\n}\\n","options.js":"export default {\\n  props: {\\n    msg: String\\n  }\\n}\\n","template.html":"<h2>{{ msg || \'No props passed yet\' }}</h2>\\n"},"description.md":{}},"description.md":"<h1 id=\\"props\\" tabindex=\\"-1\\">Props <a class=\\"header-anchor\\" href=\\"#props\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>A child component can accept input from the parent via <strong>props</strong>. First, it needs to declare the props it accepts:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">&lt;!-- ChildComp.vue --&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">setup</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> props </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">defineProps</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">msg</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #FFCB6B\\">String</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>Note <code>defineProps()</code> is a compile-time macro and doesn\'t need to be imported. Once declared, the <code>msg</code> prop can be used in the child component\'s template. It can also be accessed in JavaScript via the returned object of <code>defineProps()</code>.</p>\\n</div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">// in child component</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">props</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">msg</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #FFCB6B\\">String</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">setup</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">props</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// access props.msg</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>Once declared, the <code>msg</code> prop is exposed on <code>this</code> and can be used in the child component\'s template. The received props are passed to <code>setup()</code> as the first argument.</p>\\n</div>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">// in child component</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">props</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">msg</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #FFCB6B\\">String</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>Once declared, the <code>msg</code> prop is exposed on <code>this</code> and can be used in the child component\'s template.</p>\\n</div>\\n<p>The parent can pass the prop to the child just like attributes. To pass a dynamic value, we can also use the <code>v-bind</code> syntax:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #FFCB6B\\">ChildComp</span><span style=\\"color: #89DDFF\\"> :</span><span style=\\"color: #C792EA\\">msg</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">greeting</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\"> /&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\"> :</span><span style=\\"color: #C792EA\\">msg</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">greeting</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>Now try it yourself in the editor.</p>\\n"},"step-13":{"App":{"composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const childMsg = ref(\'No child msg yet\')\\n\\n    return {\\n      childMsg\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      childMsg: \'No child msg yet\'\\n    }\\n  }\\n}\\n","template.html":"<ChildComp />\\n<p>{{ childMsg }}</p>\\n"},"ChildComp":{"composition.js":"export default {\\n  emits: [\'response\'],\\n  setup(props, { emit }) {\\n    emit(\'response\', \'hello from child\')\\n    return {}\\n  }\\n}\\n","options.js":"export default {\\n  emits: [\'response\'],\\n  created() {\\n    this.$emit(\'response\', \'hello from child\')\\n  }\\n}\\n","template.html":"<h2>Child component</h2>\\n"},"_hint":{"App":{"template.html":"<ChildComp @response=\\"(msg) => childMsg = msg\\" />\\n<p>{{ childMsg }}</p>\\n","composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const childMsg = ref(\'No child msg yet\')\\n\\n    return {\\n      childMsg\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      childMsg: \'No child msg yet\'\\n    }\\n  }\\n}\\n"},"ChildComp":{"composition.js":"export default {\\n  emits: [\'response\'],\\n  setup(props, { emit }) {\\n    emit(\'response\', \'hello from child\')\\n    return {}\\n  }\\n}\\n","options.js":"export default {\\n  emits: [\'response\'],\\n  created() {\\n    this.$emit(\'response\', \'hello from child\')\\n  }\\n}\\n","template.html":"<h2>Child component</h2>\\n"},"description.md":{}},"description.md":"<h1 id=\\"emits\\" tabindex=\\"-1\\">Emits <a class=\\"header-anchor\\" href=\\"#emits\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>In addition to receiving props, a child component can also emit events to the parent:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">setup</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">// declare emitted events</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> emit </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">defineEmits</span><span style=\\"color: #A6ACCD\\">([</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\">])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">// emit with argument</span></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">emit</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">hello from child</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// declare emitted events</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">emits</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> [</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\">]</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">setup</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">props</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #A6ACCD\\"> emit </span><span style=\\"color: #89DDFF\\">})</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// emit with argument</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #82AAFF\\">emit</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">hello from child</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// declare emitted events</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">emits</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> [</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\">]</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">created</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// emit with argument</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #82AAFF\\">$emit</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">hello from child</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>The first argument to <span class=\\"options-api\\"><code>this.$emit()</code></span><span class=\\"composition-api\\"><code>emit()</code></span> is the event name. Any additional arguments are passed on to the event listener.</p>\\n<p>The parent can listen to child-emitted events using <code>v-on</code> - here the handler receives the extra argument from the child emit call and assigns it to local state:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #FFCB6B\\">ChildComp</span><span style=\\"color: #89DDFF\\"> @</span><span style=\\"color: #C792EA\\">response</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">msg</span><span style=\\"color: #89DDFF\\">) </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #A6ACCD\\">childMsg</span><span style=\\"color: #89DDFF\\"> = </span><span style=\\"color: #A6ACCD\\">msg</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\"> /&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\"> @</span><span style=\\"color: #C792EA\\">response</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">msg</span><span style=\\"color: #89DDFF\\">) </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #A6ACCD\\">childMsg</span><span style=\\"color: #89DDFF\\"> = </span><span style=\\"color: #A6ACCD\\">msg</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>Now try it yourself in the editor.</p>\\n"},"step-14":{"App":{"composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const msg = ref(\'from parent\')\\n\\n    return {\\n      msg\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      msg: \'from parent\'\\n    }\\n  }\\n}\\n","template.html":"<ChildComp></ChildComp>\\n"},"ChildComp":{"template.html":"<slot>Fallback content</slot>\\n"},"_hint":{"App":{"template.html":"<ChildComp>Message: {{ msg }}</ChildComp>\\n","composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const msg = ref(\'from parent\')\\n\\n    return {\\n      msg\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      msg: \'from parent\'\\n    }\\n  }\\n}\\n"},"ChildComp":{"template.html":"<slot>Fallback content</slot>\\n"},"description.md":{}},"description.md":"<h1 id=\\"slots\\" tabindex=\\"-1\\">Slots <a class=\\"header-anchor\\" href=\\"#slots\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>In addition to passing data via props, the parent component can also pass down template fragments to the child via <strong>slots</strong>:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #FFCB6B\\">ChildComp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  This is some slot content!</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #FFCB6B\\">ChildComp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  This is some slot content!</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>In the child component, it can render the slot content from the parent using the <code>&lt;slot&gt;</code> element as outlet:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">&lt;!-- in child template --&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">slot</span><span style=\\"color: #89DDFF\\">/&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">&lt;!-- in child template --&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">slot</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">slot</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>Content inside the <code>&lt;slot&gt;</code> outlet will be treated as &quot;fallback&quot; content: it will be displayed if the parent did not pass down any slot content:</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">slot</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">Fallback content</span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">slot</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>Currently we are not passing any slot content to <code>&lt;ChildComp&gt;</code>, so you should see the fallback content. Let\'s provide some slot content to the child while making use of the parent\'s <code>msg</code> state.</p>\\n"},"step-15":{"App":{"composition.js":"import JSConfetti from \'js-confetti\'\\n\\nconst confetti = new JSConfetti()\\n\\nexport default {\\n  setup() {\\n    function showConfetti() {\\n      confetti.addConfetti()\\n    }\\n\\n    showConfetti()\\n\\n    return {\\n      showConfetti\\n    }\\n  }\\n}\\n","options.js":"import JSConfetti from \'js-confetti\'\\n\\nconst confetti = new JSConfetti()\\n\\nexport default {\\n  mounted() {\\n    this.showConfetti()\\n  },\\n  methods: {\\n    showConfetti() {\\n      confetti.addConfetti()\\n    }\\n  }\\n}\\n","style.css":"h1 {\\n  text-align: center;\\n  cursor: pointer;\\n  margin-top: 3em;\\n}\\n","template.html":"<h1 @click=\\"showConfetti\\">🎉 Congratulations!</h1>\\n"},"description.md":"<h1 id=\\"you-did-it\\" tabindex=\\"-1\\">You Did It! <a class=\\"header-anchor\\" href=\\"#you-did-it\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>You have finished the tutorial!</p>\\n<p>At this point, you should have a good idea of what it\'s like to work with Vue. However, we covered a lot of things really fast and glossed over the details, so definitely keep learning! As a next step, you can:</p>\\n<ul>\\n<li>\\n<p>Set up a real Vue project on your machine by following the <a href=\\"/guide/quick-start.html\\">Quick Start</a>.</p>\\n</li>\\n<li>\\n<p>Go through the <a href=\\"/guide/essentials/application.html\\">Main Guide</a>, which covers all the topics we learned so far in greater details, and much more.</p>\\n</li>\\n<li>\\n<p>Check out some more practical <a href=\\"/examples/\\">Examples</a>.</p>\\n</li>\\n</ul>\\n<p>We can\'t wait to see what you build next!</p>\\n","import-map.json":"{\\n  \\"imports\\": {\\n    \\"js-confetti\\": \\"https://cdn.jsdelivr.net/npm/js-confetti/+esm\\"\\n  }\\n}\\n"},"step-2":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    // 컴포넌트 로직\\n\\n    return {\\n      // 템플릿에 노출\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  // 컴포넌트 옵션\\n}\\n","template.html":"<h1>안녕 Vue!</h1>\\n"},"_hint":{"App":{"composition.js":"import { reactive, ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const counter = reactive({ count: 0 })\\n    const message = ref(\'안녕 Vue!\')\\n\\n    return {\\n      counter,\\n      message\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      message: \'안녕 Vue!\',\\n      counter: {\\n        count: 0\\n      }\\n    }\\n  }\\n}\\n","template.html":"<h1>{{ message }}</h1>\\n<p>숫자 세기: {{ counter.count }}</p>\\n"},"description.md":{}},"description.md":"<h1 id=\\"선언적-렌더링\\" tabindex=\\"-1\\">선언적 렌더링 <a class=\\"header-anchor\\" href=\\"#선언적-렌더링\\" aria-hidden=\\"true\\">#</a></h1>\\n<div class=\\"sfc\\">\\n<p>편집기에 보이는 것은 Vue SFC(Single File Component)입니다.\\nSFC는 HTML, CSS, JavaScript를 캡슐화한 코드 블록으로 재사용 가능한 <code>.vue</code> 파일입니다.</p>\\n</div>\\n<p>Vue의 핵심 기능은 <strong>선언적 렌더링</strong>입니다.\\nHTML을 확장하는 템플릿 문법을 사용하여 JavaScript 상태를 기반으로 HTML이 어떻게 보이는지 설명할 수 있습니다.\\n상태가 변경되면 HTML이 자동으로 업데이트됩니다.</p>\\n<div class=\\"composition-api\\">\\n<p>변경 시, 업데이트를 트리거할 수 있는 상태는 <strong>반응형</strong>으로 간주됩니다.\\nVue의 <code>reactive()</code> API를 사용하여 반응형 상태를 선언할 수 있습니다.\\n<code>reactive()</code>로 생성된 객체는 일반 객체처럼 작동하는 JavaScript <a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">프록시</a>입니다:</p>\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">reactive</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> counter </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">reactive</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">count</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #A6ACCD\\">(counter</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">count) </span><span style=\\"color: #676E95; font-style: italic\\">// 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">counter</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">++</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p><code>reactive()</code>는 객체(배열, <code>Map</code>, <code>Set</code>과 같은 빌트인 타입 포함)에서만 작동합니다.\\n반면에 <code>ref()</code>는 모든 타입의 값을 사용할 수 있으며,\\n<code>.value</code> 속성으로 내부 값을 노출하는 객체를 생성합니다.</p>\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">ref</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> message </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">안녕 Vue!</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #A6ACCD\\">(message</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value) </span><span style=\\"color: #676E95; font-style: italic\\">// &quot;안녕 Vue!&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">message</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">메세지 변경됨</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p><code>reactive()</code> 및 <code>ref()</code>에 대한 자세한 내용은 <a target=\\"_blank\\" href=\\"/guide/essentials/reactivity-fundamentals.html\\">가이드 - 반응형 기초</a>에서 설명합니다.</p>\\n<div class=\\"sfc\\">\\n<p>컴포넌트의 <code>&lt;script setup&gt;</code> 블록에 선언된 반응형 상태는 템플릿에서 직접 사용할 수 있습니다.\\n이것은 이중 중괄호 문법을 사용하여 <code>counter</code> 객체와 <code>message</code> ref의 값을 동적으로 텍스트로 렌더링하는 방법입니다.</p>\\n</div>\\n<div class=\\"html\\">\\n<p><code>createApp()</code>에 전달되는 객체는 Vue 컴포넌트입니다.\\n컴포넌트의 상태는 <code>setup()</code> 함수 내에서 선언되어야 하며, 객체를 사용하여 반환되어야 합니다:</p>\\n<div class=\\"language-js\\"><div class=\\"highlight-lines\\"><br><div class=\\"highlighted\\">&nbsp;</div><br><br><div class=\\"highlighted\\">&nbsp;</div><br><br><br><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">setup</span><span style=\\"color: #A6ACCD\\">() </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">counter</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">reactive</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> count</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">message</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">안녕 Vue!</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">counter</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">message</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre></div><p>반환된 객체의 속성은 템플릿에서 사용할 수 있습니다.\\n이것은 이중 중괄호 문법을 사용하여 <code>message</code> 값을 동적 텍스트로 렌더링하는 방법입니다:</p>\\n</div>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;{{</span><span style=\\"color: #A6ACCD\\"> message </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">p</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">숫자 세기: </span><span style=\\"color: #89DDFF\\">{{</span><span style=\\"color: #A6ACCD\\"> counter</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">count </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">p</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>템플릿에서 <code>message</code> ref에 접근할 때, <code>.value</code>를 사용할 필요가 없습니다!\\n보다 간결한 사용을 위해 자동으로 언래핑됩니다.</p>\\n</div>\\n<div class=\\"options-api\\">\\n<p>변경 시, 업데이트를 트리거할 수 있는 상태는 <strong>반응형</strong>으로 간주됩니다.\\nVue에서 반응형 상태는 컴포넌트에 유지됩니다.\\n예제 코드에서 <code>createApp()</code>에 전달되는 객체는 컴포넌트입니다.</p>\\n<p>컴포넌트에서 객체를 반환해야하는 함수 <code>data</code> 옵션을 사용하여 반응형 상태를 선언할 수 있습니다:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><div class=\\"highlight-lines\\"><br><br><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><br><br><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">data</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      message</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">안녕 Vue!</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre></div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><div class=\\"highlight-lines\\"><br><br><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><br><br><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">data</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      message</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">안녕 Vue!</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre></div></div>\\n<p>템플릿에서 <code>message</code> 속성을 사용할 수 있습니다.\\n이것은 이중 중괄호 문법을 사용하여 <code>message</code> 값을 동적으로 텍스트로 렌더링하는 방법입니다:</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;{{</span><span style=\\"color: #A6ACCD\\"> message </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>이중 중괄호 내부의 내용은 식별자나 경로에만 국한되지 않습니다.\\n유효한 JavaScript 표현식을 사용할 수도 있습니다:</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;{{</span><span style=\\"color: #A6ACCD\\"> message</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">split</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">&#39;&#39;</span><span style=\\"color: #A6ACCD\\">)</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">reverse</span><span style=\\"color: #A6ACCD\\">()</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">join</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">&#39;&#39;</span><span style=\\"color: #A6ACCD\\">) </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><div class=\\"composition-api\\">\\n<p>이제 반응형 상태를 직접 만들고 이를 사용하여 템플릿의 <code>&lt;h1&gt;</code>에 동적 텍스트 콘텐츠를 렌더링해봅시다.</p>\\n</div>\\n<div class=\\"options-api\\">\\n<p>이제 직접 <code>data</code> 속성을 만들고 템플릿의 <code>&lt;h1&gt;</code>에 텍스트 콘텐츠로 사용해봅시다.</p>\\n</div>\\n"},"step-3":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const titleClass = ref(\'title\')\\n\\n    return {\\n      titleClass\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      titleClass: \'title\'\\n    }\\n  }\\n}\\n","style.css":".title {\\n  color: red;\\n}\\n","template.html":"<h1>나를 빨갛게 만들어 보세요</h1> \x3c!-- 여기에 동적 클래스 바인딩 추가 --\x3e\\n"},"_hint":{"App":{"template.html":"<h1 :class=\\"titleClass\\">나를 빨갛게 만들어 보세요</h1>\\n","composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const titleClass = ref(\'title\')\\n\\n    return {\\n      titleClass\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      titleClass: \'title\'\\n    }\\n  }\\n}\\n","style.css":".title {\\n  color: red;\\n}\\n"},"description.md":{}},"description.md":"<h1 id=\\"속성-바인딩\\" tabindex=\\"-1\\">속성 바인딩 <a class=\\"header-anchor\\" href=\\"#속성-바인딩\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>Vue에서 이중 중괄호는 텍스트 삽입에만 사용됩니다.\\n속성을 동적 값에 바인딩하려면 <code>v-bind</code> 디렉티브를 사용합니다:</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">div</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-bind</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #C792EA\\">id</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">dynamicId</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">div</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p><strong>디렉티브</strong>는 <code>v-</code> 접두사로 시작하는 특수한 속성으로 Vue 템플릿 문법의 일부입니다.\\n텍스트 삽입과 유사하게 디렉티브 값은 컴포넌트의 상태에 접근할 수 있는 JavaScript 표현식입니다.\\n<code>v-bind</code> 및 디렉티브 문법에 대한 자세한 내용은 <a target=\\"_blank\\" href=\\"/guide/essentials/template-syntax.html\\">가이드 - 템플릿 문법</a>에서 설명합니다.</p>\\n<p>콜론(<code>:</code>) 뒤의 부분(<code>id</code>)은 디렉티브의 &quot;인수&quot;입니다.\\n여기서 엘리먼트의 <code>id</code> 속성은 컴포넌트 상태의 <code>dynamicId</code> 속성과 동기화됩니다.</p>\\n<p><code>v-bind</code>는 너무 자주 사용되기 때문에 전용 단축 문법이 있습니다:</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">div</span><span style=\\"color: #89DDFF\\"> :</span><span style=\\"color: #C792EA\\">id</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">dynamicId</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">div</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>이제 <span class=\\"options-api\\"><code>data</code> 속성</span><span class=\\"composition-api\\"><code>ref</code></span>의 <code>titleClass</code>을 값으로 사용하여,\\n<code>&lt;h1&gt;</code>의 <code>class</code>에 동적 바인딩을 추가해 봅시다.\\n올바르게 바인딩된 경우, 텍스트가 빨간색으로 변해야 합니다.</p>\\n"},"step-4":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const count = ref(0)\\n\\n    return {\\n      count\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      count: 0\\n    }\\n  }\\n}\\n","template.html":"\x3c!-- 이 버튼이 작동하도록 만들어 봅시다 --\x3e\\n<button>숫자 세기: {{ count }}</button>\\n"},"_hint":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const count = ref(0)\\n\\n    function increment() {\\n      count.value++\\n    }\\n\\n    return {\\n      count,\\n      increment\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      count: 0\\n    }\\n  },\\n  methods: {\\n    increment() {\\n      this.count++\\n    }\\n  }\\n}\\n","template.html":"<button @click=\\"increment\\">숫자 세기: {{ count }}</button>\\n"},"description.md":{}},"description.md":"<h1 id=\\"이벤트-리스너\\" tabindex=\\"-1\\">이벤트 리스너 <a class=\\"header-anchor\\" href=\\"#이벤트-리스너\\" aria-hidden=\\"true\\">#</a></h1>\\n<p><code>v-on</code> 디렉티브를 사용하여 DOM 이벤트를 수신할 수 있습니다:</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">button</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-on</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #C792EA\\">click</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">increment</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;{{</span><span style=\\"color: #A6ACCD\\"> count </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">button</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>자주 사용되기 때문에 <code>v-on</code>에는 다음과 같은 단축 문법도 있습니다:</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">button</span><span style=\\"color: #89DDFF\\"> @</span><span style=\\"color: #C792EA\\">click</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">increment</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;{{</span><span style=\\"color: #A6ACCD\\"> count </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">button</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><div class=\\"options-api\\">\\n<p>여기서 참조되는 <code>increment</code>는 <code>methods</code> 옵션을 사용하여 선언된 함수입니다:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><div class=\\"highlight-lines\\"><br><br><br><br><br><br><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><br><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">data</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      count</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">methods</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">increment</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 컴포넌트의 count 상태 업데이트</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">++</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre></div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><div class=\\"highlight-lines\\"><br><br><br><br><br><br><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><br><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">data</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      count</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">methods</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">increment</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 컴포넌트의 count 상태 업데이트</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">++</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre></div></div>\\n<p>메서드 내에서 <code>this</code>를 사용하여 컴포넌트 인스턴스에 접근할 수 있습니다.\\n컴포넌트 인스턴스는 <code>data</code>에 의해 선언된 데이터 속성을 노출합니다.\\n이러한 속성을 변경하여 컴포넌트 상태를 업데이트할 수 있습니다.</p>\\n</div>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<p>여기서 참조되는 <code>increment</code>는 <code>&lt;script setup&gt;</code>에서 선언된 함수입니다:</p>\\n<div class=\\"language-vue\\"><div class=\\"highlight-lines\\"><br><br><br><br><br><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><br><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">setup</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">ref</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> count </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">increment</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// 컴포넌트의 count 상태 업데이트</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #89DDFF\\">++</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre></div></div>\\n<div class=\\"html\\">\\n<p>여기서 참조되는 <code>increment</code>는 <code>setup()</code>에서 반환된 객체의 메서드입니다:</p>\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">setup</span><span style=\\"color: #A6ACCD\\">() </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">increment</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">e</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// 컴포넌트의 count 상태 업데이트</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #89DDFF\\">++</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">increment</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>함수 내에서 ref 값을 변경하여 컴포넌트 상태를 업데이트할 수 있습니다.</p>\\n</div>\\n<p>이벤트 핸들러는 인라인 표현식을 사용할 수도 있으며,\\n수식어를 사용하여 일반적인 작업을 단순화할 수 있습니다.\\n이러한 세부 사항은 <a target=\\"_blank\\" href=\\"/guide/essentials/event-handling.html\\">가이드 - 이벤트 핸들링</a>에서 다룹니다.</p>\\n<p>이제 <code>increment</code> <span class=\\"options-api\\">메소드</span><span class=\\"composition-api\\">함수</span>를 직접 구현하고,\\n<code>v-on</code>을 사용하여 버튼에 바인딩 해봅시다.</p>\\n"},"step-5":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const text = ref(\'\')\\n\\n    function onInput(e) {\\n      text.value = e.target.value\\n    }\\n\\n    return {\\n      text,\\n      onInput\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      text: \'\'\\n    }\\n  },\\n  methods: {\\n    onInput(e) {\\n      this.text = e.target.value\\n    }\\n  }\\n}\\n","template.html":"<input :value=\\"text\\" @input=\\"onInput\\" placeholder=\\"여기에 입력하기\\">\\n<p>{{ text }}</p>\\n"},"_hint":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const text = ref(\'\')\\n\\n    return {\\n      text\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      text: \'\'\\n    }\\n  }\\n}\\n","template.html":"<input v-model=\\"text\\" placeholder=\\"여기에 입력하기\\">\\n<p>{{ text }}</p>\\n"},"description.md":{}},"description.md":"<h1 id=\\"폼-form-바인딩\\" tabindex=\\"-1\\">폼(form) 바인딩 <a class=\\"header-anchor\\" href=\\"#폼-form-바인딩\\" aria-hidden=\\"true\\">#</a></h1>\\n<p><code>v-bind</code>와 <code>v-on</code>을 함께 사용하면, 폼 안의 입력 엘리먼트에 양방향 바인딩을 만들 수 있습니다:</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">input</span><span style=\\"color: #89DDFF\\"> :</span><span style=\\"color: #C792EA\\">value</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">text</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\"> @</span><span style=\\"color: #C792EA\\">input</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">onInput</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><div class=\\"options-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">methods</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #82AAFF\\">onInput</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #A6ACCD\\">e</span><span style=\\"color: #F07178\\">) </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// v-on 핸들러는 네이티브 DOM 이벤트를 인자로 받습니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">text</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">e</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">target</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">onInput</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">e</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// v-on 핸들러는 네이티브 DOM 이벤트를 인자로 받습니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #A6ACCD\\">text</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">e</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">target</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>입력란에 입력할 때, <code>&lt;p&gt;</code>에 텍스트가 업데이트되는 것을 볼 수 있습니다.</p>\\n<p>Vue는 양방향 바인딩을 단순화하기 위해, 위 문법을 간편 표기하는 <code>v-model</code> 디렉티브를 제공합니다:</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">input</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-model</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">text</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p><code>v-model</code>은 <code>&lt;input&gt;</code>의 값을 바인딩된 상태와 자동으로 동기화하므로,\\n더 이상 이에 대한 이벤트 핸들러를 사용할 필요가 없습니다.</p>\\n<p><code>v-model</code>은 텍스트 입력 외에도 체크박스, 라디오 버튼, 셀렉트 드롭다운과 같은 다른 입력 타입에서도 작동합니다.\\n자세한 내용은 <a target=\\"_blank\\" href=\\"/guide/essentials/forms.html\\">가이드 - Form 입력 바인딩</a>에서 다룹니다.</p>\\n<p>이제 <code>v-model</code>을 대신 사용하도록 코드를 리팩토링 해봅시다.</p>\\n"},"step-6":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const awesome = ref(true)\\n\\n    function toggle() {\\n      // ...\\n    }\\n\\n    return {\\n      awesome,\\n      toggle\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      awesome: true\\n    }\\n  },\\n  methods: {\\n    toggle() {\\n      // ...\\n    }\\n  }\\n}\\n","template.html":"<button @click=\\"toggle\\">토글 버튼</button>\\n<h1>Vue는 굉장해! 엄청나!</h1>\\n<h1>오 안돼 😢</h1>\\n"},"_hint":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const awesome = ref(true)\\n\\n    function toggle() {\\n      awesome.value = !awesome.value\\n    }\\n\\n    return {\\n      awesome,\\n      toggle\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      awesome: true\\n    }\\n  },\\n  methods: {\\n    toggle() {\\n      this.awesome = !this.awesome\\n    }\\n  }\\n}\\n","template.html":"<button @click=\\"toggle\\">토글 버튼</button>\\n<h1 v-if=\\"awesome\\">Vue는 굉장해! 엄청나!</h1>\\n<h1 v-else>오 안돼 😢</h1>\\n"},"description.md":{}},"description.md":"<h1 id=\\"조건부-렌더링\\" tabindex=\\"-1\\">조건부 렌더링 <a class=\\"header-anchor\\" href=\\"#조건부-렌더링\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>엘리먼트를 조건부로 렌더링하기 위해 <code>v-if</code> 디렉티브를 사용할 수 있습니다:</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-if</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">awesome</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">Vue는 굉장해! 엄청나!</span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>이 <code>&lt;h1&gt;</code>은 <code>awesome</code>의 값이 <a href=\\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">truthy</a>인 경우에만 렌더링됩니다.\\n<code>awesome</code>이 <a href=\\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">falsy</a> 값으로 변경되면 DOM에서 제거됩니다.</p>\\n<p>또한 <code>v-else</code> 및 <code>v-else-if</code>를 사용하여 조건의 다른 분기를 나타낼 수도 있습니다:</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-if</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">awesome</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">Vue는 굉장해! 엄청나!</span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-else</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">오 안돼 😢</span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>현재 데모는 두 개의 <code>&lt;h1&gt;</code>을 동시에 표시하고 있으며,\\n버튼은 아무 작업도 수행하지 않습니다.\\n<code>v-if</code> 및 <code>v-else</code> 디렉티브를 추가하고 버튼을 사용하여 둘 사이를 전환할 수 있도록 <code>toggle()</code> 메서드를 구현해봅시다.</p>\\n<p><code>v-if</code>에 대한 자세한 내용은 <a target=\\"_blank\\" href=\\"/guide/essentials/conditional.html\\">가이드 - 조건부 렌더링</a>에서 다룹니다.</p>\\n"},"step-7":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    // 각 할 일에 고유한 ID 부여\\n    let id = 0\\n\\n    const newTodo = ref(\'\')\\n    const todos = ref([\\n      { id: id++, text: \'HTML 배우기\' },\\n      { id: id++, text: \'JavaScript 배우기\' },\\n      { id: id++, text: \'Vue 배우기\' }\\n    ])\\n\\n    function addTodo() {\\n      // ...\\n      newTodo.value = \'\'\\n    }\\n\\n    function removeTodo(todo) {\\n      // ...\\n    }\\n\\n    return {\\n      newTodo,\\n      todos,\\n      addTodo,\\n      removeTodo\\n    }\\n  }\\n}\\n","options.js":"// 각 할 일에 고유한 ID 부여\\nlet id = 0\\n\\nexport default {\\n  data() {\\n    return {\\n      newTodo: \'\',\\n      todos: [\\n        { id: id++, text: \'HTML 배우기\' },\\n        { id: id++, text: \'JavaScript 배우기\' },\\n        { id: id++, text: \'Vue 배우기\' }\\n      ]\\n    }\\n  },\\n  methods: {\\n    addTodo() {\\n      // ...\\n      this.newTodo = \'\'\\n    },\\n    removeTodo(todo) {\\n      // ...\\n    }\\n  }\\n}\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\n  <input v-model=\\"newTodo\\">\\n  <button>할 일 추가</button>\\n</form>\\n<ul>\\n  <li v-for=\\"todo in todos\\" :key=\\"todo.id\\">\\n    {{ todo.text }}\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\n  </li>\\n</ul>\\n"},"_hint":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    // 각 할 일에 고유한 ID 부여\\n    let id = 0\\n\\n    const newTodo = ref(\'\')\\n    const todos = ref([\\n      { id: id++, text: \'HTML 배우기\' },\\n      { id: id++, text: \'JavaScript 배우기\' },\\n      { id: id++, text: \'Vue 배우기\' }\\n    ])\\n\\n    function addTodo() {\\n      todos.value.push({ id: id++, text: newTodo.value })\\n      newTodo.value = \'\'\\n    }\\n\\n    function removeTodo(todo) {\\n      todos.value = todos.value.filter((t) => t !== todo)\\n    }\\n\\n    return {\\n      newTodo,\\n      todos,\\n      addTodo,\\n      removeTodo\\n    }\\n  }\\n}\\n","options.js":"// 각 할 일에 고유한 ID 부여\\nlet id = 0\\n\\nexport default {\\n  data() {\\n    return {\\n      newTodo: \'\',\\n      todos: [\\n        { id: id++, text: \'HTML 배우기\' },\\n        { id: id++, text: \'JavaScript 배우기\' },\\n        { id: id++, text: \'Vue 배우기\' }\\n      ]\\n    }\\n  },\\n  methods: {\\n    addTodo() {\\n      this.todos.push({ id: id++, text: this.newTodo })\\n      this.newTodo = \'\'\\n    },\\n    removeTodo(todo) {\\n      this.todos = this.todos.filter((t) => t !== todo)\\n    }\\n  }\\n}\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\n  <input v-model=\\"newTodo\\">\\n  <button>할 일 추가</button>\\n</form>\\n<ul>\\n  <li v-for=\\"todo in todos\\" :key=\\"todo.id\\">\\n    {{ todo.text }}\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\n  </li>\\n</ul>\\n"},"description.md":{}},"description.md":"<h1 id=\\"리스트-렌더링\\" tabindex=\\"-1\\">리스트 렌더링 <a class=\\"header-anchor\\" href=\\"#리스트-렌더링\\" aria-hidden=\\"true\\">#</a></h1>\\n<p><code>v-for</code> 디렉티브를 사용하여 자료 배열을 엘리먼트 목록으로 렌더링할 수 있습니다:</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">ul</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">li</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-for</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">todo</span><span style=\\"color: #89DDFF\\"> in </span><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\"> :</span><span style=\\"color: #C792EA\\">key</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">todo</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">id</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #89DDFF\\">{{</span><span style=\\"color: #A6ACCD\\"> todo</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">text </span><span style=\\"color: #89DDFF\\">}}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">li</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">ul</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>여기서 <code>todo</code>는 현재 배열 엘리먼트에서 반복되는 지역 변수입니다.\\n이것은 <code>v-for</code> 엘리먼트 또는 그 내부에서만 접근할 수 있습니다.</p>\\n<p>각 todo 객체에 고유한 <code>id</code>를 부여하고, 각 <code>&lt;li&gt;</code>에 <a target=\\"_blank\\" href=\\"/api/built-in-special-attributes.html#key\\">특별한 속성인 <code>key</code></a>를 바인딩했습니다.\\n<code>key</code>를 사용하면 Vue가 각 <code>&lt;li&gt;</code>를 정확하게 이동시켜 배열에서 해당 객체의 위치와 일치하도록 할 수 있습니다.</p>\\n<p>목록을 업데이트하는 방법에는 두 가지가 있습니다:</p>\\n<ol>\\n<li>\\n<p>자료 배열에서 <a href=\\"https://stackoverflow.com/questions/9009879/which-javascript-array-functions-are-mutating\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">변경 메소드(mutating methods)</a>를 호출합니다:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">push</span><span style=\\"color: #A6ACCD\\">(newTodo)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div>  </div>\\n  <div class=\\"options-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">push</span><span style=\\"color: #A6ACCD\\">(newTodo)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</li>\\n<li>\\n<p>배열을 새 배열로 교체합니다:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> todos</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">filter</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #676E95; font-style: italic\\">/* ... */</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div>  </div>\\n  <div class=\\"options-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">todos </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">filter</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #676E95; font-style: italic\\">/* ... */</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</li>\\n</ol>\\n<p>여기에 간단한 할 일 목록이 있습니다.\\n<code>addTodo()</code> 및 <code>removeTodo()</code> 메서드에 대한 로직을 구현하고 작동되도록 해봅시다!</p>\\n<p><code>v-for</code>에 대한 자세한 내용은 <a target=\\"_blank\\" href=\\"/guide/essentials/list.html\\">가이드 - 리스트 렌더링</a>에서 다룹니다.</p>\\n"},"step-8":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    let id = 0\\n\\n    const newTodo = ref(\'\')\\n    const hideCompleted = ref(false)\\n    const todos = ref([\\n      { id: id++, text: \'Learn HTML\', done: true },\\n      { id: id++, text: \'Learn JavaScript\', done: true },\\n      { id: id++, text: \'Learn Vue\', done: false }\\n    ])\\n\\n    function addTodo() {\\n      todos.value.push({ id: id++, text: newTodo.value, done: false })\\n      newTodo.value = \'\'\\n    }\\n\\n    function removeTodo(todo) {\\n      todos.value = todos.value.filter((t) => t !== todo)\\n    }\\n\\n    return {\\n      newTodo,\\n      hideCompleted,\\n      todos,\\n      addTodo,\\n      removeTodo\\n    }\\n  }\\n}\\n","options.js":"let id = 0\\n\\nexport default {\\n  data() {\\n    return {\\n      newTodo: \'\',\\n      hideCompleted: false,\\n      todos: [\\n        { id: id++, text: \'Learn HTML\', done: true },\\n        { id: id++, text: \'Learn JavaScript\', done: true },\\n        { id: id++, text: \'Learn Vue\', done: false }\\n      ]\\n    }\\n  },\\n  computed: {\\n    // ...\\n  },\\n  methods: {\\n    addTodo() {\\n      this.todos.push({ id: id++, text: this.newTodo, done: false })\\n      this.newTodo = \'\'\\n    },\\n    removeTodo(todo) {\\n      this.todos = this.todos.filter((t) => t !== todo)\\n    }\\n  }\\n}\\n","style.css":".done {\\n  text-decoration: line-through;\\n}\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\n  <input v-model=\\"newTodo\\" />\\n  <button>Add Todo</button>\\n</form>\\n<ul>\\n  <li v-for=\\"todo in todos\\" :key=\\"todo.id\\">\\n    <input type=\\"checkbox\\" v-model=\\"todo.done\\">\\n    <span :class=\\"{ done: todo.done }\\">{{ todo.text }}</span>\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\n  </li>\\n</ul>\\n<button @click=\\"hideCompleted = !hideCompleted\\">\\n  {{ hideCompleted ? \'Show all\' : \'Hide completed\' }}\\n</button>\\n"},"_hint":{"App":{"composition.js":"import { ref, computed } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    let id = 0\\n\\n    const newTodo = ref(\'\')\\n    const hideCompleted = ref(false)\\n    const todos = ref([\\n      { id: id++, text: \'Learn HTML\', done: true },\\n      { id: id++, text: \'Learn JavaScript\', done: true },\\n      { id: id++, text: \'Learn Vue\', done: false }\\n    ])\\n\\n    const filteredTodos = computed(() => {\\n      return hideCompleted.value\\n        ? todos.value.filter((t) => !t.done)\\n        : todos.value\\n    })\\n\\n    function addTodo() {\\n      todos.value.push({ id: id++, text: newTodo.value, done: false })\\n      newTodo.value = \'\'\\n    }\\n\\n    function removeTodo(todo) {\\n      todos.value = todos.value.filter((t) => t !== todo)\\n    }\\n\\n    return {\\n      newTodo,\\n      hideCompleted,\\n      todos,\\n      filteredTodos,\\n      addTodo,\\n      removeTodo\\n    }\\n  }\\n}\\n","options.js":"let id = 0\\n\\nexport default {\\n  data() {\\n    return {\\n      newTodo: \'\',\\n      hideCompleted: false,\\n      todos: [\\n        { id: id++, text: \'Learn HTML\', done: true },\\n        { id: id++, text: \'Learn JavaScript\', done: true },\\n        { id: id++, text: \'Learn Vue\', done: false }\\n      ]\\n    }\\n  },\\n  computed: {\\n    filteredTodos() {\\n      return this.hideCompleted\\n        ? this.todos.filter((t) => !t.done)\\n        : this.todos\\n    }\\n  },\\n  methods: {\\n    addTodo() {\\n      this.todos.push({ id: id++, text: this.newTodo, done: false })\\n      this.newTodo = \'\'\\n    },\\n    removeTodo(todo) {\\n      this.todos = this.todos.filter((t) => t !== todo)\\n    }\\n  }\\n}\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\n  <input v-model=\\"newTodo\\" />\\n  <button>Add Todo</button>\\n</form>\\n<ul>\\n  <li v-for=\\"todo in filteredTodos\\" :key=\\"todo.id\\">\\n    <input type=\\"checkbox\\" v-model=\\"todo.done\\">\\n    <span :class=\\"{ done: todo.done }\\">{{ todo.text }}</span>\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\n  </li>\\n</ul>\\n<button @click=\\"hideCompleted = !hideCompleted\\">\\n  {{ hideCompleted ? \'Show all\' : \'Hide completed\' }}\\n</button>\\n","style.css":".done {\\n  text-decoration: line-through;\\n}\\n"},"description.md":{}},"description.md":"<h1 id=\\"computed-property\\" tabindex=\\"-1\\">Computed Property <a class=\\"header-anchor\\" href=\\"#computed-property\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>Let\'s keep building on top of the todo list from the last step. Here, we\'ve already added a toggle functionality to each todo. This is done by adding a <code>done</code> property to each todo object, and using <code>v-model</code> to bind it to a checkbox:</p>\\n<div class=\\"language-vue-html\\"><div class=\\"highlight-lines\\"><br><div class=\\"highlighted\\">&nbsp;</div><br><br><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">li</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-for</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">todo</span><span style=\\"color: #89DDFF\\"> in </span><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">input</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">type</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">checkbox</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-model</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">todo</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">done</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  ...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">li</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre></div><p>The next improvement we can add is to be able to hide already completed todos. We already have a button that toggles the <code>hideCompleted</code> state. But how do we render different list items based on that state?</p>\\n<div class=\\"options-api\\">\\n<p>Introducing <a target=\\"_blank\\" href=\\"/guide/essentials/computed.html\\">computed property</a>. We can declare a property that is reactively computed from other properties using the <code>computed</code> option:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// ...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">computed</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">filteredTodos</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// return filtered todos based on `this.hideCompleted`</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// ...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">computed</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">filteredTodos</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// return filtered todos based on `this.hideCompleted`</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"composition-api\\">\\n<p>Introducing <a target=\\"_blank\\" href=\\"/guide/essentials/computed.html\\"><code>computed()</code></a>. We can create a computed ref that computes its <code>.value</code> based on other reactive data sources:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><div class=\\"highlight-lines\\"><br><br><br><br><br><br><br><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">ref</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">computed</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> hideCompleted </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #FF9CAC\\">false</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> todos </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">([</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #676E95; font-style: italic\\">/* ... */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> filteredTodos </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">computed</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// return filtered todos based on</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// `todos.value` &amp; `hideCompleted.value`</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre></div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><div class=\\"highlight-lines\\"><br><br><br><br><br><br><br><br><br><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><br><br><br><br><br><br><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">createApp</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">ref</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">computed</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">setup</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">hideCompleted</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #FF9CAC\\">false</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #F07178\\">([</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #676E95; font-style: italic\\">/* ... */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    ])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">filteredTodos</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">computed</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// return filtered todos based on</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// `todos.value` &amp; `hideCompleted.value`</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// ...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre></div></div>\\n</div>\\n<div class=\\"language-diff\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">-</span><span style=\\"color: #F07178\\"> &lt;li v-for=&quot;todo in todos&quot;&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">+</span><span style=\\"color: #C3E88D\\"> &lt;li v-for=&quot;todo in filteredTodos&quot;&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>A computed property tracks other reactive state used in its computation as dependencies. It caches the result and automatically updates it when its dependencies change.</p>\\n<p>Now, try to add the <code>filteredTodos</code> computed property and implement its computation logic! If implemented correctly, checking off a todo when hiding completed items should instantly hide it as well.</p>\\n"},"step-9":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const p = ref(null)\\n\\n    return {\\n      p\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  // ...\\n}\\n","template.html":"<p ref=\\"p\\">hello</p>\\n"},"_hint":{"App":{"composition.js":"import { ref, onMounted } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const p = ref(null)\\n\\n    onMounted(() => {\\n      p.value.textContent = \'mounted!\'\\n    })\\n\\n    return {\\n      p\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  mounted() {\\n    this.$refs.p.textContent = \'mounted!\'\\n  }\\n}\\n","template.html":"<p ref=\\"p\\">hello</p>\\n"},"description.md":{}},"description.md":"<h1 id=\\"lifecycle-and-template-refs\\" tabindex=\\"-1\\">Lifecycle and Template Refs <a class=\\"header-anchor\\" href=\\"#lifecycle-and-template-refs\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>So far, Vue has been handling all the DOM updates for us, thanks to reactivity and declarative rendering. However, inevitably there will be cases where we need to manually work with the DOM.</p>\\n<p>We can request a <strong>template ref</strong> - i.e. a reference to an element in the template - using the <a target=\\"_blank\\" href=\\"/api/built-in-special-attributes.html#ref\\">special <code>ref</code> attribute</a>:</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">p</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">ref</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">p</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">hello</span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">p</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><div class=\\"composition-api\\">\\n<p>To access the ref, we need to declare<span class=\\"html\\"> and expose</span> a ref with matching name:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> p </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">null</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">setup</span><span style=\\"color: #A6ACCD\\">() </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">p</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">null</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">p</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>Notice the ref is initialized with <code>null</code> value. This is because the element doesn\'t exist yet when <span class=\\"sfc\\"><code>&lt;script setup&gt;</code></span><span class=\\"html\\"><code>setup()</code></span> is executed. The template ref is only accessible after the component is <strong>mounted</strong>.</p>\\n<p>To run code after mount, we can use the <code>onMounted()</code> function:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">onMounted</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">onMounted</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// component is now mounted.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">onMounted</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">setup</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #82AAFF\\">onMounted</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// component is now mounted.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"options-api\\">\\n<p>The element will be exposed on <code>this.$refs</code> as <code>this.$refs.p</code>. However, you can only access it after the component is <strong>mounted</strong>.</p>\\n<p>To run code after mount, we can use the <code>mounted</code> option:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">mounted</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// component is now mounted.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">mounted</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// component is now mounted.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</div>\\n<p>This is called a <strong>lifecycle hook</strong> - it allows us to register a callback to be called at certain times of the component\'s lifecycle. There are other hooks such as <span class=\\"options-api\\"><code>created</code> and <code>updated</code></span><span class=\\"composition-api\\"><code>onUpdated</code> and <code>onUnmounted</code></span>. Check out the <a target=\\"_blank\\" href=\\"/guide/essentials/lifecycle.html#lifecycle-diagram\\">Lifecycle Diagram</a> for more details.</p>\\n<p>Now, try to add an <span class=\\"options-api\\"><code>mounted</code></span><span class=\\"composition-api\\"><code>onMounted</code></span> hook, access the <code>&lt;p&gt;</code> via <span class=\\"options-api\\"><code>this.$refs.p</code></span><span class=\\"composition-api\\"><code>p.value</code></span>, and perform some direct DOM operations on it (e.g. changing its <code>textContent</code>).</p>\\n"}}');const M={class:"tutorial"},S=["innerHTML"],_={key:0,class:"hint"},V=["href"],L=b(" 이전"),H=["href"],$=b("다음 ");var J=l(p({setup(l){const p=new s({defaultVueRuntimeURL:`https://unpkg.com/vue@${t}/dist/vue.esm-browser.js`}),J=c(),B=r("prefer-composition"),O=r("prefer-sfc"),N=c(""),P=Object.keys(I).sort(((s,n)=>Number(s.replace(/^step-/,""))-Number(n.replace(/^step-/,"")))),W=P.length,G=/<h1.*?>(.+?)<a class="header-anchor/,R=P.map(((s,n)=>({text:`${n+1}. ${I[s]["description.md"].match(G)[1]}`,link:`#${s}`}))),U=i((()=>{var s;return null==(s=I[N.value])?void 0:s["description.md"]})),X=i((()=>P.indexOf(N.value)+1)),z=i((()=>{const s=N.value.match(/\d+/),n=s&&"step-"+(+s[0]-1);if(n&&I.hasOwnProperty(n))return n})),Y=i((()=>{const s=N.value.match(/\d+/),n=s&&"step-"+(+s[0]+1);if(n&&I.hasOwnProperty(n))return n})),K=c(!1);function Q(s=!1){let n=location.hash.slice(1);I.hasOwnProperty(n)||(n="step-1",location.hash=`#${n}`),N.value=n;const a=K.value?I[n]._hint:I[n];p.setFiles(O.value?o(a,B.value):e(a,B.value),O.value?"App.vue":"index.html"),s&&x((()=>{J.value.scrollTop=0}))}function Z(){K.value=!K.value,Q()}return d([B,O],(()=>Q())),n((()=>{K.value=!1,Q(!0)})),Q(),(s,n)=>{var o;return w(),D("section",M,[F("article",{class:"instruction",ref_key:"instruction",ref:J},[y(C),y(u(A),{button:`${u(X)} / ${u(W)}`},{default:h((()=>[(w(!0),D(j,null,E(u(R),((s,n)=>(w(),T(u(q),{class:k(["vt-menu-link",{active:n+1===u(X)}]),href:s.link},{default:h((()=>[b(m(s.text),1)])),_:2},1032,["class","href"])))),256))])),_:1},8,["button"]),F("div",{class:"vt-doc",innerHTML:u(U)},null,8,S),(null==(o=u(I)[N.value])?void 0:o._hint)?(w(),D("div",_,[F("button",{onClick:Z},m(K.value?"초기화":"보여줘!"),1)])):v("",!0),F("footer",null,[u(z)?(w(),D("a",{key:0,href:`#${u(z)}`},[y(u(f),{class:"vt-link-icon",style:{margin:"0"}}),L],8,V)):v("",!0),u(Y)?(w(),D("a",{key:1,class:"next-step",href:`#${u(Y)}`},[$,y(u(g),{class:"vt-link-icon"})],8,H)):v("",!0)])],512),y(u(a),{layout:"vertical",store:u(p),showCompileOutput:!1,clearConsole:!1,showImportMap:!1,onKeyup:n[0]||(n[0]=s=>K.value=!1)},null,8,["store"])])}}}),[["__scopeId","data-v-2d4d37a1"]]);export{J as default};
